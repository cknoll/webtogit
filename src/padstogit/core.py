import os
import shutil
import git
# from ipydex import IPS, activate_ips_on_exception
# activate_ips_on_exception()



safty_explanation = """
# The presence (not the content) of this file is checked before the repo is purged.
# This should prevent the software from accidentally deleting an unwanted directory
# e.g. due to mistakes in configuration file.
"""

gitignore_content = f"""

log.txt

{safty_explanation}
.padstogit
"""

class Core():
    """
    Main class which holds all information
    """

    def __init__(self):
        self.settings = None
        self.repo_dir = None
        self.repo_path = None
        self.repo_name = None
        self.checkfile = None
        self.load_settings()

        self.checkfile = os.path.join(self.repo_dir, ".padstogit")

    def load_settings(self):
        self.settings = {
            "repo_path": "./",
            "repo_name": "archived-pads",
            "readme_content": "This file was generated by padstogit\n"
        }


        self.repo_path = os.path.abspath(self.settings["repo_path"])
        self.repo_name = self.settings["repo_name"]
        self.repo_dir = os.path.join(self.repo_path, self.repo_name)

    def init_pad_repo(self):

        if os.path.exists(self.repo_dir):
            raise FileExistsError(f"{self.repo_dir} already exists")

        r = git.Repo.init(self.repo_dir)
        os.chdir(self.repo_dir)

        # prevent the directory from being accidentally deleted
        # this file will be ignored by git due to .gitignore
        fname = self.checkfile
        with open(fname, 'w') as txtfile:
            txtfile.write(safty_explanation)

        self.checkfile = os.path.join(self.repo_dir, fname)

        # Create the first files for the repo
        fname = "README.md"
        with open(fname, 'w') as txtfile:
            txtfile.write(self.settings["readme_content"])
        r.index.add([fname])

        fname = ".gitignore"
        with open(fname, 'w') as txtfile:
            txtfile.write(gitignore_content)
        r.index.add([fname])

        fname = ".padstogit"
        with open(fname, 'w') as txtfile:
            txtfile.write(gitignore_content)
        r.index.add([fname])

        r.index.commit("initial commit")

    def purge_pad_repo(self, ignore_errors=False):

        assert self.checkfile is not None

        if not ignore_errors and not os.path.exists(self.checkfile):
            msg = f"The file `{self.checkfile}` is missing. Abort deletion of `{self.repo_dir}`."
            raise FileNotFoundError(msg)
        
        # IPS()
        shutil.rmtree(self.repo_dir)





def script_main():

    IPS()
    print("Script successfully executed")
